
theory Lprop

  use set.Fset
  use string.Char
  use mach.int.Int63

  type prop =
    | Atom int63
    | And prop prop
    | Or prop prop
    | Impl prop prop
    | Bot

  let rec (==) (x y : prop) : bool
    ensures { x = y <-> result = True }
    variant { x, y }
  = match x, y with
    | Atom n, Atom m -> n = m
    | And a b, And a' b'    -> a == a' && b == b'
    | Or a b, Or a' b'      -> a == a' && b == b'
    | Impl a b, Impl a' b'  -> a == a' && b == b'
    | Bot, Bot -> True
    | _, _ -> False
    end

  predicate var (v : int) (f : prop) 
  = match f with
    | Atom s    -> v = s
    | And a b   -> var v a \/ var v b
    | Or a b    -> var v a \/ var v b
    | Impl a b  -> var v a \/ var v b
    | Bot       -> false
    end

  predicate satisfy (e : fset int63) (f : prop)
  = match f with
    | Atom s    -> mem s e
    | And a b   -> (satisfy e a /\ satisfy e b)
    | Or a b    -> (satisfy e a \/ satisfy e b)
    | Impl a b  -> (satisfy e a -> satisfy e b)
    | Bot       -> false
    end

  predicate form_satisfy (h : prop) (f : prop)
  = forall e. satisfy e h -> satisfy e f

  predicate satisfy_set (e : fset int63) (g : fset prop)
  = forall h. mem h g -> satisfy e h
  
  predicate set_satisfy (g : fset prop) (f : prop)
  = forall e. satisfy_set e g -> satisfy e f

  predicate sat (f : prop) = exists e : fset int63. satisfy e f

  goal Axiom_rule: forall g p.
    mem p g -> set_satisfy g p

  goal Eand_rule: forall g p q.
    set_satisfy g (And p q) ->
    set_satisfy g p /\ set_satisfy g q

  goal Ior1_rule: forall g p q.
    set_satisfy g p ->
    set_satisfy g (Or p q)

  goal Ior2_rule: forall g p q.
    set_satisfy g q ->
    set_satisfy g (Or p q)

  goal Eor_rule: forall g p q r.
    set_satisfy g (Or p q) ->
    set_satisfy g (Impl p r) ->
    set_satisfy g (Impl q r) ->
    set_satisfy g r

  goal Raa_rule: forall g p.
    set_satisfy g (Impl (Impl p Bot) Bot) ->
    set_satisfy g p

  goal Ebot_rule: forall g p.
    set_satisfy g Bot ->
    set_satisfy g p

  goal Eimpl_rule: forall g. forall p q : prop. 
    set_satisfy g p ->
    set_satisfy g (Impl p q) ->
    set_satisfy g p

  goal Iimpl_rule: forall g. forall p q : prop.
    set_satisfy (add p g) q ->
    set_satisfy g (Impl p q)

end