theory Proof
  (* A simple theory of proofs in propositional logic *)

  use lprop.Lprop
  use list.List
  use list.Elements
  use list.Mem

  (**
    TODO : factorise this using structures and labels
  *)
  type proof =
    | Pr_axiom  prop
    | Pr_Iimpl  proof prop
    | Pr_Eimpl  proof proof prop
    | Pr_Ior1   proof prop
    | Pr_Ior2   proof prop
    | Pr_Eor    proof proof proof prop
    | Pr_Eand1  proof prop
    | Pr_Eand2  proof prop
    | Pr_Iand   proof proof prop
    | Pr_RAA    proof prop
    | Pr_Ebot   proof prop


  let function conseq (pr : proof) =
    match pr with
    | Pr_axiom p -> p
    | Pr_Iimpl _ p -> p
    | Pr_Eimpl _ _ p -> p
    | Pr_Ior1 _ p -> p
    | Pr_Ior2 _ p -> p
    | Pr_Eor _ _ _ p -> p
    | Pr_Eand1 _ p -> p
    | Pr_Eand2 _ p -> p
    | Pr_Iand _ _ p -> p
    | Pr_RAA _ p -> p
    | Pr_Ebot _ p -> p
    end

  let rec function contain (x : prop) (g : list prop) : bool
    ensures { Mem.mem x g <-> result = True }
    variant { g }
  = match g with
    | Nil -> False
    | Cons y ys -> (y == x) || contain x ys
    end

  (**
    TODO : subfunctions ???
  *)
  let rec check_proof (g : list prop) (pr : proof)
    ensures { result = True -> set_satisfy (Elements.elements g) (conseq pr) }
    variant { pr }
  = match pr with
    | Pr_axiom p -> contain p g
    | Pr_Iimpl prq (Impl p q) -> conseq prq == q && check_proof (Cons p g) prq
    | Pr_Eimpl pr1 pr2 p ->
      match conseq pr1 with
      | Impl a b ->
        conseq pr2 == a && p == b &&
        check_proof g pr1 && check_proof g pr2
      | _ -> False
      end
    | Pr_Ior1 pr (Or a _) -> conseq pr == a && check_proof g pr
    | Pr_Ior2 pr (Or _ b) -> conseq pr == b && check_proof g pr
    | Pr_Eor pru pra prb q ->
      match conseq pru, conseq pra, conseq prb with
      | Or a b, Impl x cx, Impl y cy ->
        a == x && b == y && cx == q && cy == q &&
        check_proof g pru && check_proof g pra &&
        check_proof g prb
      | _ -> False
      end
    | Pr_Eand1 pr p ->
      match conseq pr with
      | And a _ -> a == p && check_proof g pr
      | _ -> False
      end
    | Pr_Eand2 pr p ->
      match conseq pr with
      | And _ a -> a == p && check_proof g pr
      | _ -> False
      end
    | Pr_Iand pra prb (And a b) ->
      conseq pra == a && conseq prb == b &&
      check_proof g pra && check_proof g prb
    | Pr_RAA pra p ->
      match conseq pra with
      | Impl (Impl a Bot) Bot -> a == p && check_proof g pra
      | _ -> False
      end
    | Pr_Ebot pr _ ->
      match conseq pr with
      | Bot -> check_proof g pr
      | _ -> False
      end
    | _ -> False
    end
end