module Finders

  use lprop.Lprop
  use proof.Proof
  use list.List
  use list.Mem

  exception Not_found

  let rec find (pred : prop -> bool) (l : list prop) 
    variant { l }
    ensures { pred result }
    ensures { hypothesis result l }
    raises  { Not_found -> forall x. Mem.mem x l -> not pred x }
  = match l with
    | Nil -> raise Not_found
    | Cons x xs -> if pred x then x else find pred xs
    end

  let rec function rem (h : prop) (l : list prop)
    variant { l }
    ensures { not (mem h result) }
    ensures { forall p. p <> h -> mem p l -> mem p result }
  = match l with
    | Nil -> Nil
    | Cons x xs ->
      if x == h then rem h xs
      else Cons x (rem h xs)
    end


  (* lemma remove_weak :
    forall e h p.
      set_satisfy (Elements.elements (rem h e)) p ->
      set_satisfy (Elements.elements e) p *)

  (**
    Check if a prop [q] is of the form [h -> p] where
    [h] is an hypothesis
  *)
  let do_implies (q : prop) (p : prop) (env : list prop)
    ensures { result -> exists x. q = Impl x p /\ hypothesis x env }
  = match q with
    | Impl h x -> (x == p) && (hypothesis h env)
    | _ -> false
    end

  let do_and_left (p : prop) (q : prop) 
    ensures { result -> exists x. q = And p x }
  = match q with
    | And x _ -> p == x
    | _ -> false
    end

  let do_and_right (p : prop) (q : prop)
    ensures { result -> exists x. q = And x p }
  = match q with
    | And _ x -> p == x
    | _ -> false
    end

  let do_case (q : prop) (p : prop) (env : list prop)
    ensures { result -> exists a b. q = Or a b 
                        /\ hypothesis (Impl a p) env
                        /\ hypothesis (Impl b p) env
            }
  = match q with
    | Or a b ->
      let h1 = Impl a p in 
      let h2 = Impl b p in
      hypothesis h1 env && hypothesis h2 env
    | _ -> false
    end

  let do_disj (q : prop)
    ensures { result -> exists a b. q = Or a b }
  = match q with
    | Or _ _ -> true
    | _ -> false
    end
end

module Transform
  use lprop.Lprop
  use proof.Proof
  use list.List
  use list.Mem
  use list.Elements
  use set.Fset

  lemma weakening :
    forall p r. forall env.
    set_satisfy env r ->
    set_satisfy (add p env) r

  (* predicate mem_split (e1 : fset prop) (e2 : fset prop)
  = forall p q. mem (And p q) e1 -> (mem p e2 /\ mem q e2)

  predicate mem_join (e1 : fset prop) (e2 : fset prop)
  = forall p q. mem (Or p q) e1 -> (mem p e2 \/ mem q e2) *)

  predicate mem_sat (e1 : fset prop) (e2 : fset prop)
  = forall p. mem p e1 -> set_satisfy e2 p

  predicate stable (e1 : fset prop) (e2 : fset prop)
  = forall p. set_satisfy e1 p -> set_satisfy e2 p

  lemma mem_sat_stable :
    forall e1 e2.
      mem_sat e2 e1 ->
      stable e2 e1

  let rec function split (env : list prop)
    ensures { mem_sat (Elements.elements result) (Elements.elements env) }
    variant { env }
  = match env with
    | Nil -> Nil
    | Cons (And a b) env' ->
      assert { set_satisfy (Elements.elements env) a };
      assert { set_satisfy (Elements.elements env) b };
      Cons a (Cons b (split env'))
    | Cons a env' -> Cons a (split env')
    end

  lemma split_correct:
    forall e. stable (Elements.elements (split e)) (Elements.elements e)

  (* predicate mem_join (e1 : fset prop) (e2 : fset prop)
  = forall p. mem p e1 -> (mem e2 p \/ set_satisfy e2 p) *)

  predicate stable_join (e1 : fset prop) (e2 : fset prop) (e3 : fset prop)
  = forall p. (set_satisfy e1 p /\ set_satisfy e2 p) -> set_satisfy e3 p

  (* lemma mem_join_stable_join :
    forall e1 e2 e3.
      mem_join e3 e1 e2 ->
      stable_join e1 e2 e3 *)

  lemma mem_sat_stable_join :
    forall e1 e2 e3.
      mem_sat e1 e3 ->
      mem_sat e2 e3 ->
      stable_join e1 e2 e3

  let rec function join (env : list prop)
    (* ensures { let (j1, j2) = result in stable_join (Elements.elements j1) (Elements.elements j2) (Elements.elements env) } *)
    ensures { let (j1, _) = result in mem_sat (Elements.elements env) (Elements.elements j1) }
    ensures { let (_, j2) = result in mem_sat (Elements.elements env) (Elements.elements j2) }
    variant { env }
  = match env with
    | Nil ->
      (Nil, Nil)
    | Cons (Or a b) env' ->
      let (j1, j2) = (Cons a env'), (Cons b env') in
      j1, j2
    | Cons a env' ->
      let (j1, j2) = join env' in
      Cons a j1, Cons a j2
    end

    (* lemma join_correct :
      forall e. let (j1, j2) = join e in
        stable_join
          (Elements.elements j1)
          (Elements.elements j2)
          (Elements.elements e) *)

end


module Strategies

  use proof.Proof
  use lprop.Lprop
  use list.List
  use list.Mem
  use Finders

  exception ProofNotFound

  let search_false (env : list prop) (p : prop)
    ensures { is_proof env result }
    ensures { conseq result = p }
    raises  { ProofNotFound }
  = if hypothesis Bot env
    then Pr_Ebot (Pr_axiom Bot) p
    else raise ProofNotFound

  let search_axiom (env : list prop) (p : prop)
    ensures { is_proof env result }
    ensures { conseq result = p }
    raises  { ProofNotFound }
  = if hypothesis p env 
    then Pr_axiom p
    else raise ProofNotFound

  let search_raa (env : list prop) (p : prop) 
    ensures { is_proof env result }
    ensures { conseq result = p }
    raises  { ProofNotFound }
  = let nnp = Impl (Impl p Bot) Bot in
    if hypothesis nnp env
    then Pr_RAA (Pr_axiom nnp) p
    else raise ProofNotFound


  let search_Eimpl (env : list prop) (p : prop)
    ensures { is_proof env result }
    ensures { conseq result = p }
    raises  { ProofNotFound }
  = try
      let h = find (fun q -> do_implies q p env) env in
      match h with
      | Impl a _ -> Pr_Eimpl (Pr_axiom h) (Pr_axiom a) p
      end
    with Not_found -> raise ProofNotFound end


  let search_Eand (env : list prop) (p : prop)
    ensures { is_proof env result }
    ensures { conseq result = p }
    raises  { ProofNotFound }
  = try
      let x = find (do_and_left p) env in
      Pr_Eand1 (Pr_axiom x) p
    with Not_found ->
    try
      let x = find (do_and_right p) env in
      Pr_Eand2 (Pr_axiom x) p
    with Not_found -> raise ProofNotFound end end


  let search_Eor (env : list prop) (p : prop)
    ensures { is_proof env result }
    ensures { conseq result = p }
    raises  { ProofNotFound }
  = try
      let h = find (fun q -> do_case q p env) env in
      match h with
      | Or a b ->
        let h1 = Pr_axiom h in
        let h2 = Pr_axiom (Impl a p) in
        let h3 = Pr_axiom (Impl b p) in
        Pr_Eor h1 h2 h3 p
      end
    with Not_found -> raise ProofNotFound end


  let search_contradiction (env : list prop) (p : prop) 
    ensures { is_proof env result }
    ensures { conseq result = p }
    raises  { ProofNotFound }
  = try
      let x = find (fun q -> hypothesis (Impl q Bot) env) env in
      Pr_Ebot (Pr_Eimpl (Pr_axiom (Impl x Bot)) (Pr_axiom x) Bot) p
    with Not_found -> raise ProofNotFound end

  
  let search_immediate_rule (env : list prop) (p : prop)
    ensures { is_proof env result }
    ensures { conseq result = p }
    raises { ProofNotFound }
  = let fall_back ()
      ensures { is_proof env result }
      ensures { conseq result = p }
      raises { ProofNotFound }
    = try search_Eimpl env p
      with ProofNotFound ->
      try search_Eor env p
      with ProofNotFound ->
      try search_Eor env p
      with ProofNotFound ->
      try search_Eand env p
      with ProofNotFound ->
      search_raa env p
      end end end end
    in
    match p with
    | And x y ->
      if hypothesis x env && hypothesis y env
      then Pr_Iand (Pr_axiom x) (Pr_axiom y) p
      else fall_back ()
    | Or x y ->
      if hypothesis x env 
      then Pr_Ior1 (Pr_axiom x) p
      else if hypothesis y env
      then Pr_Ior2 (Pr_axiom y) p
      else fall_back ()
    | _ -> fall_back ()
    end

    let rec prove (env : list prop) (p : prop)
      ensures { conseq result = p }
      ensures { is_proof env result }
      raises  { ProofNotFound }
      variant { p }
    = try
        search_axiom env p
      with ProofNotFound ->
      try
        search_immediate_rule env p
      with ProofNotFound ->
      try
        search_contradiction env p
      with ProofNotFound ->
      (* try *)
        match p with
        | And a b ->
          let pra = prove env a in
          let prb = prove env b in
          Pr_Iand pra prb p
        | Or a b ->
          try Pr_Ior1 (prove env a) p
          with ProofNotFound -> Pr_Ior2 (prove env b) p end
        | Impl a b ->
          Pr_Iimpl (prove (Cons a env) b) p
        | _ -> raise ProofNotFound
        end
      (* with ProofNotFound ->
      try
        let h = find do_disj env in
        match h with
        | Or a b ->
          let pr1 = prove (Cons a env) p in
          let pr2 = prove (Cons b env) p in
          Pr_Eor (Pr_axiom h) pr1 pr2 p
        end
      with Not_found -> raise ProofNotFound end *)
      end end end

end